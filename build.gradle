plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
ext {
    devBuild = true
}

group = 'me.theseems'
version = ext.devBuild ? getVersionName() : "1.2.0"

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'Lumine Releases'
        url = 'https://mvn.lumine.io/repository/maven-public/'
    }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name "nexus"
            url project.ext.devBuild ? project.devNexusURL : project.nexusURL
            credentials {
                username project.coffeehubUsername
                password project.coffeehubPassword
            }
        }
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    implementation project(':toughwiki-api')
    implementation project(':toughwiki-common')
    implementation 'com.github.stefvanschie.inventoryframework:IF:0.10.7'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
    compileOnly 'me.clip:placeholderapi:2.9.2'
    compileOnly 'io.lumine:Mythic-Dist:5.0.3-SNAPSHOT'
}

def targetJavaVersion = 17
java {
    withSourcesJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

shadowJar {
    relocate 'com.github.stefvanschie.inventoryframework', 'me.theseems.toughwiki.inventoryframework'
    relocate 'com.fasterxml.jackson', 'me.theseems.toughwiki.jackson'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version' : project.version,
            'devBuild': project.ext.devBuild
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates